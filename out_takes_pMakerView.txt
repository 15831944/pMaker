  
  //#ifdef USE_LOCAL_EXTRUDER
void CpMakerView::make3dPath() 
{
    if (NULL == threeDCoords)   /// !!! OCT 2004
        return;

    if (threeDCoords->point.getNum() <= 1)  {
        BOOL    bAddFileDialog = TRUE;
        LPCTSTR lpszFilter = NULL;
        LPCTSTR lpszDefExt = "iv";
        LPCTSTR lpszFileName = "*.iv";
        DWORD   dwFlags = OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT;
        CWnd    *pParentWnd = NULL;

        CFileDialog addFileDialog(bAddFileDialog,
            lpszDefExt, lpszFileName, dwFlags,
            lpszFilter, pParentWnd);

        addFileDialog.m_ofn.lpstrTitle = LPCTSTR("Load Loft PATH...");
        int nModal = addFileDialog.DoModal();
        CString m_strAddFile;
        if (nModal != IDOK) return;
        
        m_strAddFile = addFileDialog.GetFileName();
        SetCurrentDirectory(addFileDialog.GetFolderPath());
        SoInput myInput;
        myInput.openFile(m_strAddFile);

        // add the file to existing nodes...
        SoSeparator *tempSep = new SoSeparator;
        tempSep->ref();
        tempSep->addChild(SoDB::readAll(&myInput));
        myInput.closeFile();
        SoCoordinate3* pathCoords = (SoCoordinate3 *)CpMakerView::findChildOfType(
            tempSep, SoCoordinate3::getClassTypeId());
        threeDCoords->copyFieldValues(pathCoords);
      tempSep->unref();
    }
    loftPathCoords->copyFieldValues(threeDCoords);
    for (int k = 0; k < loftPathCoords->point.getNum(); k++)  {
        SbVec3f point = loftPathCoords->point[k];
        TRACE("%f  %f  %f\n", point[0], point[1], point[2]);
    }
    int numThreeDCoords = threeDCoords->point.getNum();
    loftScaleCoords->point.deleteValues(0, -1);
   loftScale2Coords->point.deleteValues(0,-1);

////////////////////////////////////////////
#ifdef  USE_SECOND_SCALE

   loftScale2Coords->point.setValue(vScaleCoords->point[0][1],
             vScaleCoords->point[0][1], 1.0);

#endif  // USE_SECOND_SCALE
/////////////////////////////////////////////
   if (fIsEqualScale)     // !!! OCt 2004
        loftScaleCoords->point.setValue(hScaleCoords->point[0][1],
             hScaleCoords->point[0][1], 1.0); 
   else
      loftScaleCoords->point.setValue(hScaleCoords->point[0][1],
             vScaleCoords->point[0][1], 1.0);

    // get total length of horiz line...
    float totalLength = 0;
    for (int i = 1; i < numThreeDCoords; i++)
    {
        totalLength +=	dist(threeDCoords->point[i], threeDCoords->point[i - 1]);
    }
    float currentLength = 0;
    for (int i = 1; i < numThreeDCoords; i++)
    {
        currentLength += dist(threeDCoords->point[i], threeDCoords->point[i - 1]);
        //float z = interpolateZ(currentLength);
        SbVec3f sc = interpolateScale(currentLength / totalLength);
        loftScaleCoords->point.set1Value(i, sc);
////////////////////////////////////////////
#ifdef  USE_SECOND_SCALE
      sc = interpolateScale2(currentLength / totalLength);
      loftScale2Coords->point.set1Value(i, sc);
#endif  // USE_SECOND_SCALE
//////////////////////////////////////////////
    }
    return;
}


void CpMakerView::makeLoftObject() 
{
    //loftCoords->point.deleteValues(0);
   // loftFaces->coordIndex.deleteValues(0);

    int numShapeVertices = sectionCoords->point.getNum();
    int numPathVertices  = loftPathCoords->point.getNum();

    SbRotation rot;
    int loftCoordsCount = 0;

#ifdef GENERATE_CENTERLINES
    int midlineCoordsCount = 0;
#endif

    // generate coordinate points...
    for (int i = 0; i < numPathVertices; i++)
    {
        // apply scale, rotation and translation to shape vertices...
        SbMatrix mat;
        mat.makeIdentity();

        // rescale the section to give true corners...
        if (/*fAntiSquish && */ i != 0 && i != numPathVertices - 1 )
        {
            float deflection1 = atan2 (( loftPathCoords->point[i][1] - loftPathCoords->point[i-1][1]) , 
                (  loftPathCoords->point[i][0] - loftPathCoords->point[i-1][0] ));
            float deflection2 = atan2 (( loftPathCoords->point[i+1][1] - loftPathCoords->point[i][1]) , 
                (  loftPathCoords->point[i+1][0] - loftPathCoords->point[i][0] ));
            deflection1 -= deflection2;
            deflection1 /= 2;
            SbMatrix mat00;
            float scaleFactor = fabs(1/cos(deflection1));
            mat00.setScale(SbVec3f(scaleFactor, 1, 1));
            mat *= mat00;
        }
        int count = 0;
        SbMatrix mat0;
        mat0.setScale(loftScaleCoords->point[i]);
        mat *= mat0;

        // do the scale thing first, so offsetting is simpler...
        SoMFVec3f scaledCoords;
        scaledCoords.deleteValues(0, -1);
        int scaledCoordsCount = 0;
        for (int j = 0; j < numShapeVertices; j++) {
            SbVec3f result;
            mat.multVecMatrix(sectionCoords->point[j], result);
            scaledCoords.set1Value(scaledCoordsCount++, result);			
        }
////////////////////////
#ifdef USE_SECOND_SCALE		
        SbMatrix scale2mat;
        scale2mat.identity();
        SbRotation rotNone;
        //         setTransform(
        //         const SbVec3f         &translation,
        //         const SbRotation      &rotation,
        //         const SbVec3f         &scaleFactor,
        //         const SbRotation      &scaleOrientation,
        //         const SbVec3f         &center);     

        SbVec3f center = SbVec3f(-7.5, 12.65,0);
        SbVec3f scale2 = loftScale2Coords->point[i];
        SbVec3f newCenter;
        mat.multVecMatrix(center, newCenter);
        SbVec3f translation = SbVec3f(0,0,0);
        scale2mat.setTransform(translation,rotNone,scale2,rotNone, newCenter);
        for (j = 0; j < numShapeVertices; j++) {
            SbVec3f result;
            scale2mat.multVecMatrix(scaledCoords[j], result);
            scaledCoords.set1Value(j, result);			
        }
#endif USE_SECOND_SCALE			
///////////////////////

    fClosedShape = FALSE;
    if ((fabs(scaledCoords[0][0] - scaledCoords[numShapeVertices - 1][0]) < .01) &&
        (fabs(scaledCoords[0][1] - scaledCoords[numShapeVertices - 1][1]) < .01)  )
            {  fClosedShape = TRUE; }

    // do an offset if desired...
    // float fOffset = 1;
    SoMFVec3f offsetCoords;
    offsetCoords.deleteValues(0, -1);
    if (fOffset == 0) {
        for( int f = 0; f < scaledCoordsCount; f++)
            offsetCoords.set1Value(f, scaledCoords[f]);	
    } else {
        SoMFVec3f tempOffsetCoords;
        tempOffsetCoords.deleteValues(0, -1);
        int tempOffsetCoordsCount = 0;
        // generate 2 offset endpoints for each segment...
        for (int j = 0; j < numShapeVertices; j++)
        {
            float theta = GetTheta(scaledCoords[j], scaledCoords[j+1]) + 1.570796;
            SbVec3f resultCoords;
            resultCoords = CalcVectorPoint(scaledCoords[j], fOffset, theta);
            tempOffsetCoords.set1Value(tempOffsetCoordsCount++, resultCoords);
            resultCoords = CalcVectorPoint(scaledCoords[j + 1], fOffset, theta);
            tempOffsetCoords.set1Value(tempOffsetCoordsCount++, resultCoords);
        }
        TRACE("tempOffsetCoordsCount = %d   vertices = %d\n", tempOffsetCoordsCount, numShapeVertices);

        // intersect the segments for the offset shape...
        int offsetCoordsCount = 0;
        offsetCoords.deleteValues(0, -1);

        SbVec3f intersectionPt;

        // set the first coord assuming figure is not closed...
        offsetCoords.set1Value(offsetCoordsCount++, tempOffsetCoords[0]);
        for (int j = 0; j < numShapeVertices - 1; j++)
        {
            // get intersections for the rest...
            int k = j * 2;
            intersectionPt = GetIntersection(tempOffsetCoords[k], tempOffsetCoords[k + 1], 
            tempOffsetCoords[k + 2], tempOffsetCoords[k + 3]);
            offsetCoords.set1Value(offsetCoordsCount++, intersectionPt);
        }
        // set the last coord assuming figure is not closed...
        offsetCoords.set1Value(offsetCoordsCount++, tempOffsetCoords[tempOffsetCoordsCount - 1]);
        if (fClosedShape) {
            intersectionPt = GetIntersection(tempOffsetCoords[0], tempOffsetCoords[1], 
            tempOffsetCoords[tempOffsetCoordsCount - 2], tempOffsetCoords[tempOffsetCoordsCount - 1]);
            offsetCoords.set1Value(0, intersectionPt);
            offsetCoords.set1Value(offsetCoordsCount - 2, intersectionPt);
        }	
    }
    // finished scaling and offsetting...so continue matrix operations...
    SbMatrix mat1;
    SbRotation rot3(SbVec3f(1,0,0), 1.5708);
    mat1.setRotate(rot3);

    SbMatrix mat2;
    SbVec3f translate = loftPathCoords->point[i];
    mat2.setTranslate(translate);

    // get current rotation...

    ///////////////////////////////////////////////////////////////////
    #ifdef ORIENT_TO_REFERENCE_CENTERLINE
    rot = this->interpolatePRY2_Align_with_Reference_Centerline(i);
    #else        
    if (0 == i)
    rot = this->getPRY(loftPathCoords->point[i], loftPathCoords->point[i+1]);
    else if (i == numPathVertices - 1)
    rot = this->getPRY(loftPathCoords->point[i-1], loftPathCoords->point[i]);
    else
    rot = this->interpolatePRY2(
    loftPathCoords->point[i - 1], 
    loftPathCoords->point[i],
    loftPathCoords->point[i + 1]);
    #endif // ORIENT_TO_REFERENCE_CENTERLINE
    ///////////////////////////////////////////////////////////////////////////////

    SbMatrix mat3;
    mat3.setRotate(rot);

    //mat  /= mat0; // already did this...
    SbMatrix finalMat;
    finalMat.makeIdentity();
    finalMat *= mat1;
    finalMat *= mat3;
    finalMat *= mat2;

    ///////////////////////////////////////
    #ifdef GENERATE_CENTERLINES

    SoCoordinate3* tempCoords = new SoCoordinate3;
    //tempCoords->ref();
    tempCoords->point.deleteValues(0,-1);
    //tempCoords->point.setNum(2000);

    #endif
    ///////////////////////////////////////
    // generate the lofted shape...
    for (int j = 0; j < numShapeVertices; j++)
    {
    SbVec3f result;
    finalMat.multVecMatrix(offsetCoords[j], result);
    loftCoords->point.set1Value(loftCoordsCount++, result);

    //////////////////////////////////////////////
    #ifdef GENERATE_CENTERLINES

    // generate the lofted centerlines...
    tempCoords->point.set1Value(j, result);
    if (j > 0)
    {
    SbVec3f point1 = result;
    SbVec3f point2 = tempCoords->point[j-1];
    SbVec3f midpoint = SbVec3f( 
    point1[0] + ((point2[0] - point1[0]) * .5),
    point1[1] + ((point2[1] - point1[1]) * .5),
    point1[2] + ((point2[2] - point1[2]) * .5));
    midlineCoords->point.set1Value(midlineCoordsCount++, midpoint);
    TRACE("midlineCoordsCount = %d\n", midlineCoordsCount);

    }
    //tempCoords->unref();
    #endif 
    ////////////////////////////////////////////
    }
    }

    // now generate Indexed Triangle Strip coordinate indices...
    int numShapeCoords = sectionCoords->point.getNum();
    int numPathCoords  = loftPathCoords->point.getNum();

    int numSides = numShapeCoords - 1;   /// this varies with geometry...
    int num = loftCoords->point.getNum();
    int count = 0;

    if (fUpperLowerDialog == NULL)
    {
    fLowerLimit = 0;
    fUpperLimit = loftPathCoords->point.getNum()- 1;
    }
    else
    {
    fLowerLimit = fUpperLowerDialog->fInteger1;
    fUpperLimit = fUpperLowerDialog->fInteger2;
    }

    /*
    for(int j = 0; j < numShapeCoords - 1; j++)
    {
    for (int i = j + fLowerLimit; i < fUpperLimit; i++) {
    loftFaces->coordIndex.set1Value(count++, i);
    loftFaces->coordIndex.set1Value(count++, i + 1);
    i += numShapeCoords - 1;
    }
    loftFaces->coordIndex.set1Value(count++, -1);
    }
    */

    if (fUpperLimit == loftPathCoords->point.getNum())
    fUpperLimit--;


    #ifdef GENERATE_CENTERLINES

    SoCoordinate3 coords[10];
    for(i = 0; i < 10; i++)
    {
    coords[i].ref();
    coords[i].point.deleteValues(0,-1);
    }

    for(int j = 0; j < numSides; j++)
    {
    //for(int k = j; k < loftCoords->point.getNum(); k += numSides)
    for(int k = j; k < midlineCoords->point.getNum(); k += numSides)
    {
    coords[j].point.set1Value(coords[j].point.getNum(), midlineCoords->point[k]);
    }     
    }
    SoWriteAction wa;
    wa.getOutput()->openFile("centerlines_e.iv");

    for(i=0; i<numSides; i++)
    //for(i=0; i<1; i++)
    {
    wa.apply(&coords[i]);
    //wa.apply(midlineCoords);
    SoLineSet* lineSet = new SoLineSet;
    lineSet->ref();
    wa.apply(lineSet);
    lineSet->unref();
    }
    wa.getOutput()->closeFile();

    #endif

    for( int jj = 0; jj < numShapeCoords - 1; jj++)
    {
    for (int i = jj + fLowerLimit * numShapeCoords; i < jj + fUpperLimit * numShapeCoords; i++) 
    {
    loftFaces->coordIndex.set1Value(count++, i);
    loftFaces->coordIndex.set1Value(count++, i + 1);
    loftFaces->coordIndex.set1Value(count++, i + numShapeCoords);
    loftFaces->coordIndex.set1Value(count++, -1);

    loftFaces->coordIndex.set1Value(count++, i + 1);
    loftFaces->coordIndex.set1Value(count++, i + numShapeCoords + 1);
    loftFaces->coordIndex.set1Value(count++, i + numShapeCoords);
    loftFaces->coordIndex.set1Value(count++, -1);

    i += numShapeCoords - 1;
    }
    }
}

/*
float CpMakerView::interpolateZ(float length)
{
   TRACE("interpolate z\n");
    // we take the y-value and interpolate a z-value...
    int num = vertCoords->point.getNum();
    float offset =	vertCoords->point[0][0];  // assures that profile starts at 0
    for (int i = 0; i < num; i++)
    {
        if (vertCoords->point[i][0] - offset >= length)
        {
            if (i == 0)
                return vertCoords->point[i][1];

            float x2 = vertCoords->point[i][0] - offset;
            float x1 = vertCoords->point[i - 1][0] - offset;
            float ratio = (length - x1) / (x2 - x1);
            float z2 = vertCoords->point[i][1];
            float z1 = vertCoords->point[i - 1][1];
            float z = (z2 - z1) * ratio + z1;
            return z;
        }
    }
    return vertCoords->point[num-1][1]; // return the last "z" value if horizontal
                                        // line is longer than vertical line.
}
*/


SbVec3f CpMakerView::interpolateScale(float length /* really a ratio of length : full-length  */)
{
    //TRACE("length = %f\n", length);
    // we take the y-value and interpolate a z-value...
     TRACE("interpolateScale\n");
    int num = hScaleCoords->point.getNum();
    float hLength = length * hScaleCoords->point[num-1][0];
    float vScale = 1;
    float hScale = 1;
    if (num < 2) hScale = hScaleCoords->point[0][1];
    else if (length >= 1)
        hScale = hScaleCoords->point[num - 1][1];
    else {
        for (int i = 0; i < num; i++)  {
            if (hScaleCoords->point[i][0] == hLength)  {
                hScale = hScaleCoords->point[i][1];
                TRACE("case 3 !!!!!!\n");
                i = num;
            }
            else if (hScaleCoords->point[i][0] > hLength)  {
                if (i == 0)  {
                    hScale = hScaleCoords->point[i][1];
                    i = num;
                } else {
                    float x2 = hScaleCoords->point[i][0];
                    float x1 = hScaleCoords->point[i - 1][0];
                    float ratio = (length - x1) / (x2 - x1);
                    float z2 = hScaleCoords->point[i][1];
                    float z1 = hScaleCoords->point[i - 1][1];
                    float z = (z2 - z1) * ratio + z1;
                    hScale = z;
                    //TRACE("hScale = %f\n", hScale);
                    i = num;
                }
            }
        }
    }
    if (fIsEqualScale) {
        vScale = hScale;
      return SbVec3f(hScale, vScale, 1);
   }
 
   //vscalecoords
    //////////////////////////////////////////////////////
TRACE ("using VSCALE coords at the wrong time");
    num = vScaleCoords->point.getNum();
    float vLength = length * vScaleCoords->point[num-1][0];
    if (num < 2) return SbVec3f(hScale,vScale,1);
    for (int i = 0; i < num; i++)  {
        if (vScaleCoords->point[i][0] >= length)  {
            if (i == 0) {
                vScale = vScaleCoords->point[0][0];
                i = num;
            } else {
                float x2 = vScaleCoords->point[i][0];
                float x1 = vScaleCoords->point[i - 1][0];
                float ratio = (length - x1) / (x2 - x1);
                float z2 = vScaleCoords->point[i][1];
                float z1 = vScaleCoords->point[i - 1][1];
                float z = (z2 - z1) * ratio + z1;
                vScale = z;
                i = num;
            }
        }
    }	
    return SbVec3f(hScale, vScale, 1);
}

////////////////////////////////////////////////////////////////////////////
#ifdef USE_SECOND_SCALE
SbVec3f CpMakerView::interpolateScale2(float length /* really a ratio of length : full-length  */)
{
    //TRACE("length = %f\n", length);
    // we take the y-value and interpolate a z-value...

    int num = vScaleCoords->point.getNum();
    float hLength = length * vScaleCoords->point[num-1][0];
    float vScale = 1;
    if (num < 2) vScale = vScaleCoords->point[0][1];
    else if (length >= 1)
        vScale = vScaleCoords->point[num - 1][1];
    else 
    {
        for (int i = 0; i < num; i++)
        {
            if (vScaleCoords->point[i][0] == hLength)
            {
                vScale = vScaleCoords->point[i][1];
                TRACE("case 3 !!!!!!\n");
                i = num;
            }
            else if (vScaleCoords->point[i][0] > hLength)
            {
                if (i == 0)
                {
                    vScale = vScaleCoords->point[i][1];
                    i = num;
                }
                else 
                {
                    float x2 = vScaleCoords->point[i][0];
                    float x1 = vScaleCoords->point[i - 1][0];
                    float ratio = (length - x1) / (x2 - x1);
                    float z2 = vScaleCoords->point[i][1];
                    float z1 = vScaleCoords->point[i - 1][1];
                    float z = (z2 - z1) * ratio + z1;
                    vScale = z;
                    //TRACE("vScale = %f\n", vScale);
                    i = num;
                }
            }
        }
    }
   return SbVec3f(vScale, vScale, 1);
}
#endif // USE_SECOND_SCALE
///////////////////////////////////////////

double CpMakerView::GetTheta(SbVec3f pt1, SbVec3f pt2)
{
         TRACE("GetTheta1\n");
    return  atan2 (( pt2[1] - pt1[1]) , ( pt2[0] - pt1[0] ));   
}


double CpMakerView::GetTheta(double ptAx, double ptAy, double ptBx, double ptBy)
{
         TRACE("GetTheta2\n");
    return atan2 (( ptBy - ptAy ) , ( ptBx - ptAx));
}

double CpMakerView::GetTheta(double sideX, double sideY)
{
         TRACE("GetTheta3\n");
    return atan2 (sideY, sideX);
}

SbRotation CpMakerView::interpolatePRY(SbVec3f pt1, SbVec3f pt2, SbVec3f pt3)
{
         TRACE("interpolatePRY\n");
    // doing it this way eliminates any roll...
    SbRotation horizRot1(SbVec3f(0,1,0), SbVec3f(pt2[0] - pt1[0], pt2[1] - pt1[1], 0));
    SbRotation horizRot2(SbVec3f(0,1,0), SbVec3f(pt3[0] - pt2[0], pt3[1] - pt2[1], 0));

    TRACE("theta 1 = %f   theta 2 = %f  \n", GetTheta(pt2, pt1), GetTheta(pt3, pt2));
    float theta1 = GetTheta(pt2, pt1); // + 1.5708;
    float theta2 = GetTheta(pt3, pt2); // + 1.5708;

    // if one is positive and one is negative, i.e., straddles 180/-180...
    if (fabs(theta1 - theta2) > 3.1415926)
    {
        if (theta1 < 0) theta1 = 3.1415926 + (3.1415926 + theta1);
        if (theta2 < 0) theta2 = 3.1415926 + (3.1415926 + theta2);
        TRACE("fixed the theta problem\n");
    }
    
    //SbRotation horizRot1(0, 0, 1, theta1);
    //SbRotation horizRot2(0, 0, 1, theta2);

    SbRotation vertRot1(SbVec3f(pt2[0] - pt1[0], pt2[1] - pt1[1], 0), pt2 - pt1);
    SbRotation vertRot2(SbVec3f(pt3[0] - pt2[0], pt3[1] - pt2[1], 0), pt3 - pt2);

    horizRot1 *= vertRot1;
    horizRot2 *= vertRot2;
    SbRotation result = SbRotation::slerp(horizRot1, horizRot2, .5);

    return result;
}


SbRotation CpMakerView::interpolatePRY2(SbVec3f pt1, SbVec3f pt2, SbVec3f pt3)
{
             TRACE("interpolatePRY2\n");
    // doing it this way eliminates any roll...

    SbRotation horizRot1(SbVec3f(0,1,0), SbVec3f(pt2[0] - pt1[0], pt2[1] - pt1[1], 0));
    SbRotation horizRot2(SbVec3f(0,1,0), SbVec3f(pt3[0] - pt2[0], pt3[1] - pt2[1], 0));

    SbRotation vertRot1(SbVec3f(pt2[0] - pt1[0], pt2[1] - pt1[1], 0), pt2 - pt1);
    SbRotation vertRot2(SbVec3f(pt3[0] - pt2[0], pt3[1] - pt2[1], 0), pt3 - pt2);

    //SbRotation rollRot1(SbVec3f(pt2[0] - pt1[0], pt2[1] - pt1[1], 0), pt2 - pt1);
    //SbRotation rollRot2(SbVec3f(pt3[0] - pt2[0], pt3[1] - pt2[1], 0), pt3 - pt2);

    horizRot1 *= vertRot1;
    horizRot2 *= vertRot2;
    SbRotation result = SbRotation::slerp(horizRot1, horizRot2, .5);   //  !!!!! Oct 2004
    //SbRotation result = horizRot1;   // !!!!!  
    return result;
}


SbRotation CpMakerView::interpolatePRY2_Align_with_Reference_Centerline(int i)
{
             TRACE("interpolatePRY2 align\n");
///////////////////////////////////////////////////////////////////
#ifdef ORIENT_TO_REFERENCE_CENTERLINE
   
   //SbRotation dummy;
   //dummy.identity();
   //return dummy;


   SbVec3f pt1;
   SbVec3f pt2;
   SbVec3f pt3;
   SbRotation rot;
    int numPathVertices  = loftPathCoords->point.getNum();
   if (i == 0)
   {
        rot = this->getPRY(loftPathCoords->point[i], loftPathCoords->point[i+1]);
      return rot;
   }
    else if (i == numPathVertices - 1)
   {
        rot = this->getPRY(loftPathCoords->point[i-1], loftPathCoords->point[i]);
      return rot;
   }
    else
   {
        pt1 = loftPathCoords->point[i - 1]; 
        pt2 = loftPathCoords->point[i];
        pt3 = loftPathCoords->point[i + 1];
   
      SbVec3f centerlinePoint = pt2;
      SbVec3f referenceVector = pt2 - fReferenceCenterlineCoords->point[i];
      // take the angle from 0,0,-1 to moved reference point to get rotation and apply rotation.
      // using constructor: SbRotation(const SbVec3f &rotateFrom, const SbVec3f &rotateTo)
      SbRotation rotTowardReference(SbVec3f(0,-1,0), referenceVector);
   
      // find the new z vector direction...
      SbVec3f srcVec(0,0,1);
      SbVec3f dstVec;
      rotTowardReference.multVec(srcVec, dstVec);

      // rotate the current perpendicular toward the interpolated direction of the current extrusion
       SbRotation horizRot1(SbVec3f(0,1,0), SbVec3f(pt2[0] - pt1[0], pt2[1] - pt1[1], 0));
       SbRotation horizRot2(SbVec3f(0,1,0), SbVec3f(pt3[0] - pt2[0], pt3[1] - pt2[1], 0));

       SbRotation vertRot1(SbVec3f(pt2[0] - pt1[0], pt2[1] - pt1[1], 0), pt2 - pt1);
       SbRotation vertRot2(SbVec3f(pt3[0] - pt2[0], pt3[1] - pt2[1], 0), pt3 - pt2);

       horizRot1 *= vertRot1;
       horizRot2 *= vertRot2;
       SbRotation result = SbRotation::slerp(horizRot1, horizRot2, .5);   //  !!!!! Oct 2004
      
      return result;

      SbVec3f srcVec2(0,0,1);
      SbVec3f dstVec2;
      result.multVec(srcVec2, dstVec2);

      SbRotation adjustRot = SbRotation(dstVec, dstVec2);

      //rotTowardReference *= adjustRot;
      return rotTowardReference;
   }
}
#else
////////////////////////////////////////////////////////////////////      // move current centerline point to 0,0.  Move current reference centerline point by same amount.
   SbRotation dummy;
   dummy.identity();
   return dummy;
}
#endif 

SbRotation CpMakerView::interpolatePRY3(SbVec3f pt1, SbVec3f pt2, SbVec3f pt3)
{
             TRACE("interpolatePRY3\n");
    //SbRotation rot1(pt2 - pt1);
    //SbRotation rot2(pt3 - pt2);
    //SbRotation result = SbRotation::slerp(rot1, rot2, .5);
    SbRotation result;
    return result;
}


SbRotation CpMakerView::getPRY(SbVec3f pt1, SbVec3f pt2)
{
    TRACE("getPRY\n");
    SbRotation horizRot1(SbVec3f(0,1,0), SbVec3f(pt2[0] - pt1[0], pt2[1] - pt1[1], 0));
    SbRotation vertRot1(SbVec3f(pt2[0] - pt1[0], pt2[1] - pt1[1], 0), pt2 - pt1);
    horizRot1 *= vertRot1;
    return horizRot1;
}

//#endif // USE_LOCAL_EXTRUDER
  
  
    BOOL    bAddFileDialog = FALSE;
    LPCTSTR lpszFilter = NULL;
    LPCTSTR lpszDefExt = "_tree.iv";
    LPCTSTR lpszFileName = "*_tree.iv";
    DWORD   dwFlags = OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT;
    CWnd    *pParentWnd = NULL;
 
    CFileDialog addFileDialog(bAddFileDialog,
        lpszDefExt, lpszFileName, dwFlags,
        lpszFilter, pParentWnd);

    addFileDialog.m_ofn.lpstrTitle = LPCTSTR("Save the Loft Object and its centerline for TREES...");
    int nModal = addFileDialog.DoModal();
    CString m_strAddFile;

    if (nModal == IDOK) {
        m_strAddFile = addFileDialog.GetFileName();
        SetCurrentDirectory(addFileDialog.GetFolderPath());
        
        SoWriteAction wa;
        wa.getOutput()->openFile(m_strAddFile);
        CWhichBranchDialog dlg;
        dlg.fIsLeft = TRUE;
        int ret = dlg.DoModal();
        if (ret != IDOK)
            return;
        SbString string;
        if(dlg.fIsLeft == TRUE)
            string = "Left";
        else
            string = "Right";
        SbString string1 = string;
        SbString string2("BranchExtrusion");
        string1 += string2;
        SbName savedName = loftRoot->getName();
        loftRoot->setName(string1);
        wa.apply(loftRoot);			  // BranchExtrusion
        loftRoot->setName(savedName);	
        savedName = threeDCoords->getName();
        SbString string3("Centerline");
        string += string3;
        threeDCoords->setName(string);
        wa.apply(threeDCoords );      // Centerline
        threeDCoords->setName(savedName);
        wa.getOutput()->closeFile();
    }	